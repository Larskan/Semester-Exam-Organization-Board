// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace OrganizationBoard.Tests.ServiceTests.BlackBox_Specs
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UserLoginAndAccountCreationFeature : object, Xunit.IClassFixture<UserLoginAndAccountCreationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "ServiceTests/BlackBox.Specs", "User Login and Account Creation", "  As a user of the Organization Board application\r\n  I want to be able to log in " +
                "and create new accounts\r\n  So that I can access and manage my organization\'s boa" +
                "rds and tasks", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Login.feature"
#line hidden
        
        public UserLoginAndAccountCreationFeature(UserLoginAndAccountCreationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successful User Login with Valid Credentials")]
        [Xunit.TraitAttribute("FeatureTitle", "User Login and Account Creation")]
        [Xunit.TraitAttribute("Description", "Successful User Login with Valid Credentials")]
        public async global::System.Threading.Tasks.Task SuccessfulUserLoginWithValidCredentials()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Successful User Login with Valid Credentials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 11
    await testRunner.GivenAsync("a user with email \"test@example.com\" and password \"hashedPassword\" exists in the " +
                        "database", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 12
    await testRunner.AndAsync("the RSA service will decrypt \"encryptedPassword\" to \"decryptedPassword\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
    await testRunner.AndAsync("the BCrypt service will verify \"decryptedPassword\" against \"hashedPassword\" as tr" +
                        "ue", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
    await testRunner.WhenAsync("the user attempts to log in with email \"test@example.com\" and password \"encrypted" +
                        "Password\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
    await testRunner.ThenAsync("the login should be successful and the user details are returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Login Fails with Invalid Email")]
        [Xunit.TraitAttribute("FeatureTitle", "User Login and Account Creation")]
        [Xunit.TraitAttribute("Description", "Login Fails with Invalid Email")]
        public async global::System.Threading.Tasks.Task LoginFailsWithInvalidEmail()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Login Fails with Invalid Email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 18
    await testRunner.GivenAsync("no user with email \"wrong@example.com\" exists in the database", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 19
    await testRunner.WhenAsync("the user attempts to log in with email \"wrong@example.com\" and password \"anyPassw" +
                        "ord\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
    await testRunner.ThenAsync("an UnauthorizedAccessException should be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Login Fails with Invalid Password")]
        [Xunit.TraitAttribute("FeatureTitle", "User Login and Account Creation")]
        [Xunit.TraitAttribute("Description", "Login Fails with Invalid Password")]
        public async global::System.Threading.Tasks.Task LoginFailsWithInvalidPassword()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Login Fails with Invalid Password", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
    await testRunner.GivenAsync("a user with email \"test@example.com\" and password \"hashedPassword\" exists in the " +
                        "database", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
    await testRunner.AndAsync("the RSA service will decrypt \"wrongEncryptedPassword\" to \"decryptedWrongPassword\"" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
    await testRunner.AndAsync("the BCrypt service will verify \"decryptedWrongPassword\" against \"hashedPassword\" " +
                        "as false", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.WhenAsync("the user attempts to log in with email \"test@example.com\" and password \"wrongEncr" +
                        "yptedPassword\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
    await testRunner.ThenAsync("an UnauthorizedAccessException should be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Login Fails due to RSA Decryption Error")]
        [Xunit.TraitAttribute("FeatureTitle", "User Login and Account Creation")]
        [Xunit.TraitAttribute("Description", "Login Fails due to RSA Decryption Error")]
        public async global::System.Threading.Tasks.Task LoginFailsDueToRSADecryptionError()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Login Fails due to RSA Decryption Error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 30
    await testRunner.GivenAsync("a user with email \"test@example.com\" and password \"hashedPassword\" exists in the " +
                        "database", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 31
    await testRunner.AndAsync("the RSA service throws an exception when decrypting \"encryptedPassword\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
    await testRunner.WhenAsync("the user attempts to log in with email \"test@example.com\" and password \"encrypted" +
                        "Password\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
    await testRunner.ThenAsync("an ApplicationException with message \"Something went wrong while logging in.\" sho" +
                        "uld be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Login Fails due to BCrypt Verification Error")]
        [Xunit.TraitAttribute("FeatureTitle", "User Login and Account Creation")]
        [Xunit.TraitAttribute("Description", "Login Fails due to BCrypt Verification Error")]
        public async global::System.Threading.Tasks.Task LoginFailsDueToBCryptVerificationError()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Login Fails due to BCrypt Verification Error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 36
    await testRunner.GivenAsync("a user with email \"test@example.com\" and password \"hashedPassword\" exists in the " +
                        "database", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 37
    await testRunner.AndAsync("the RSA service will decrypt \"encryptedPassword\" to \"decryptedPassword\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
    await testRunner.AndAsync("the BCrypt service throws an exception when verifying \"decryptedPassword\" against" +
                        " \"hashedPassword\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
    await testRunner.WhenAsync("the user attempts to log in with email \"test@example.com\" and password \"encrypted" +
                        "Password\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
    await testRunner.ThenAsync("an ApplicationException with message \"Something went wrong while logging in.\" sho" +
                        "uld be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successful Account and Organization Creation")]
        [Xunit.TraitAttribute("FeatureTitle", "User Login and Account Creation")]
        [Xunit.TraitAttribute("Description", "Successful Account and Organization Creation")]
        public async global::System.Threading.Tasks.Task SuccessfulAccountAndOrganizationCreation()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Successful Account and Organization Creation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 43
    await testRunner.GivenAsync("the \"Admin\" role exists in the database", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 44
    await testRunner.AndAsync("the BCrypt service will hash \"newPassword\" to \"hashedNewPassword\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
    await testRunner.WhenAsync("a new account is created with email \"newuser@example.com\", password \"newPassword\"" +
                        ", and organization \"NewOrg\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
    await testRunner.ThenAsync("a new organization \"NewOrg\" should be saved to the database", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 47
    await testRunner.AndAsync("a new user \"newuser@example.com\" with \"hashedNewPassword\" and \"Admin\" role for \"N" +
                        "ewOrg\" should be saved to the database", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Account and Organization Creation Fails if Admin Role Not Found")]
        [Xunit.TraitAttribute("FeatureTitle", "User Login and Account Creation")]
        [Xunit.TraitAttribute("Description", "Account and Organization Creation Fails if Admin Role Not Found")]
        public async global::System.Threading.Tasks.Task AccountAndOrganizationCreationFailsIfAdminRoleNotFound()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Account and Organization Creation Fails if Admin Role Not Found", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 50
    await testRunner.GivenAsync("the \"Admin\" role does not exist in the database", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 51
    await testRunner.WhenAsync("a new account is created with email \"newuser@example.com\", password \"newPassword\"" +
                        ", and organization \"NewOrg\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
    await testRunner.ThenAsync("an ApplicationException with message \"Something went wrong while logging in.\" sho" +
                        "uld be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Account and Organization Creation Fails due to Database Error during Organization" +
            " Save")]
        [Xunit.TraitAttribute("FeatureTitle", "User Login and Account Creation")]
        [Xunit.TraitAttribute("Description", "Account and Organization Creation Fails due to Database Error during Organization" +
            " Save")]
        public async global::System.Threading.Tasks.Task AccountAndOrganizationCreationFailsDueToDatabaseErrorDuringOrganizationSave()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Account and Organization Creation Fails due to Database Error during Organization" +
                    " Save", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 55
    await testRunner.GivenAsync("the \"Admin\" role exists in the database", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 56
    await testRunner.AndAsync("the BCrypt service will hash \"newPassword\" to \"hashedNewPassword\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
    await testRunner.AndAsync("a database error occurs when saving the organization \"NewOrg\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
    await testRunner.WhenAsync("a new account is created with email \"newuser@example.com\", password \"newPassword\"" +
                        ", and organization \"NewOrg\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 59
    await testRunner.ThenAsync("an ApplicationException with message \"Something went wrong while logging in.\" sho" +
                        "uld be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Account and Organization Creation Fails due to Database Error during User Save")]
        [Xunit.TraitAttribute("FeatureTitle", "User Login and Account Creation")]
        [Xunit.TraitAttribute("Description", "Account and Organization Creation Fails due to Database Error during User Save")]
        public async global::System.Threading.Tasks.Task AccountAndOrganizationCreationFailsDueToDatabaseErrorDuringUserSave()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Account and Organization Creation Fails due to Database Error during User Save", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 62
    await testRunner.GivenAsync("the \"Admin\" role exists in the database", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 63
    await testRunner.AndAsync("the BCrypt service will hash \"newPassword\" to \"hashedNewPassword\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
    await testRunner.AndAsync("the organization \"NewOrg\" is successfully saved", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
    await testRunner.AndAsync("a database error occurs when saving the user \"newuser@example.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
    await testRunner.WhenAsync("a new account is created with email \"newuser@example.com\", password \"newPassword\"" +
                        ", and organization \"NewOrg\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
    await testRunner.ThenAsync("an ApplicationException with message \"Something went wrong while logging in.\" sho" +
                        "uld be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await UserLoginAndAccountCreationFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await UserLoginAndAccountCreationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
